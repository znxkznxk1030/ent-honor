{"version":3,"sources":["Chat/chat-block.jsx","Chat/chat-util.js","Chat/chat.jsx"],"names":["ChatBlock","className","this","props","name","isMine","message","React","Component","prefixSet","nameSet","getRandomInt","max","Math","floor","random","xss","require","io","socket","Chat","state","chatId","displayName","chatValue","chatlogs","initializeDisplayName","then","initializeChatServer","secure","reconnectionDelayMax","emit","id","listenChatEvent","Promise","resolve","reject","prefix","length","console","log","setState","on","data","filteredData","Object","keys","forEach","key","push","e","target","value","map","chat","index","type","onChange","handleChatValueChange","bind","onClick","handleBoardcastChat"],"mappings":"8LAsBeA,E,8JAlBb,WACE,OAAO,I,oBAGT,WACE,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,qBAAKA,UAAU,YAAf,SAA4BC,KAAKC,MAAMC,SAEzC,mBAAGH,UAAW,aAAeC,KAAKC,MAAME,OAAS,MAAQ,WAAzD,SACGH,KAAKC,MAAMG,iB,GAZEC,IAAMC,WCHxBC,EAAY,CAChB,qBACA,eACA,qBACA,eACA,qBACA,qBACA,sBAGIC,EAAU,CACd,2BACA,qBACA,qBACA,qBACA,qBACA,eACA,qBACA,sBAGIC,EAAe,SAACC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,ICjBhCI,EAAMC,EAAQ,IAEZC,EAAKD,EAAQ,IAIfE,EAAS,KACPC,E,kDACJ,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,MAAQ,CACXC,OAAQ,GACRC,YAAa,GACbC,UAAW,GACXC,SAAU,IANK,E,qDAUnB,WAAqB,IAAD,OAClBvB,KAAKwB,wBAAwBC,MAAK,SAACJ,GACjC,EAAKK,qBAAqBL,Q,kCAI9B,SAAqBA,IACnBJ,EAASD,EAAG,oCAAqC,CAC/CW,QAAQ,EACRC,qBAAsB,OAGjBC,KAAK,QAAS,CACnBC,GAAIT,IAGNrB,KAAK+B,oB,mCAGP,WAAyB,IAAD,OACtB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAS5B,EAAUE,EAAaF,EAAU6B,SAC1ClC,EAAOM,EAAQC,EAAaD,EAAQ4B,SAE1CC,QAAQC,IAAIH,EAAQjC,GAEpB,EAAKqC,SAAS,CAAElB,YAAac,EAASjC,IAAQ,WAC5CmC,QAAQC,IAAI,EAAKnB,MAAME,aACvBY,EAAQ,EAAKd,MAAME,qB,6BAKzB,WAAmB,IAAD,OAChBJ,EAAOuB,GAAG,QAAQ,SAACC,GACjB,IAAMlB,EAAW,EAAKJ,MAAMI,SACxBmB,EAAe,GACnBC,OAAOC,KAAKH,GAAMI,SAAQ,SAACC,GACzBJ,EAAaI,GAAOhC,EAAI2B,EAAKK,OAE/BvB,EAASwB,KAAKL,GACd,EAAKH,SAAS,CAAEhB,kB,mCAIpB,SAAsByB,GACpB,IAAM1B,EAAY0B,EAAEC,OAAOC,MAC3BlD,KAAKuC,SAAS,CAAEjB,gB,iCAGlB,WACEL,EAAOY,KAAK,OAAQ,CAClB3B,KAAMF,KAAKmB,MAAME,YACjB6B,MAAOlD,KAAKmB,MAAMG,c,oBAItB,WAAU,IAAD,OACP,OACE,qBAAKvB,UAAU,kBAAf,SACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,YAAf,SASGC,KAAKmB,MAAMI,SAAS4B,KAAI,SAACC,EAAMC,GAC9B,IAAMlD,EAASiD,EAAKlD,OAAS,EAAKiB,MAAME,YAExC,OACE,cAAC,EAAD,CAEElB,OAAQA,EACRD,KAAMkD,EAAKlD,KACXE,QAASgD,EAAKF,OAHTG,QAQb,sBAAKtD,UAAU,YAAf,UACE,uBACEA,UAAU,YACVuD,KAAK,OACLJ,MAAOlD,KAAKmB,MAAMG,UAClBiC,SAAUvD,KAAKwD,sBAAsBC,KAAKzD,QAE5C,wBACED,UAAU,gBACV2D,QAAS1D,KAAK2D,oBAAoBF,KAAKzD,MAFzC,SAIE,mBAAGD,UAAU,kC,GAzGRM,IAAMC,WAkHVY,a","file":"static/js/8.7c159ba6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style-chat.scss\";\n\nclass ChatBlock extends React.Component {\n  isMyChat() {\n    return false;\n  }\n\n  render() {\n    return (\n      <div className=\"chat\">\n        <div className=\"user-photo\">\n          <div className=\"user-name\">{this.props.name}</div>\n        </div>\n        <p className={\"chat-msg \" + (this.props.isMine ? \"me \" : \"friend \")}>\n          {this.props.message}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default ChatBlock;\n","const prefixSet = [\n  \"겁먹은\",\n  \"신난\",\n  \"무서운\",\n  \"화난\",\n  \"똑똑한\",\n  \"귀여운\",\n  \"행복한\",\n];\n\nconst nameSet = [\n  \"아기돼지\",\n  \"김종문\",\n  \"신대장\",\n  \"김호들\",\n  \"유느님\",\n  \"피오\",\n  \"천해명\",\n  \"장기두\",\n];\n\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * max);\n};\n\nexport { prefixSet, nameSet, getRandomInt };\n","import React from \"react\";\nimport \"./style-chat.scss\";\n\nimport ChatBlock from \"./chat-block\";\nimport { prefixSet, nameSet, getRandomInt } from \"./chat-util\";\nlet xss = require(\"xss\");\n\nconst io = require(\"socket.io-client\");\n\n// wss://52.78.163.98:8080\n\nlet socket = null;\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatId: \"\",\n      displayName: \"\",\n      chatValue: \"\",\n      chatlogs: [],\n    };\n  }\n\n  componentDidMount() {\n    this.initializeDisplayName().then((displayName) => {\n      this.initializeChatServer(displayName);\n    });\n  }\n\n  initializeChatServer(displayName) {\n    socket = io(\"ws://great-award-server.site:8080\", {\n      secure: true,\n      reconnectionDelayMax: 10000,\n    });\n\n    socket.emit(\"login\", {\n      id: displayName,\n    });\n\n    this.listenChatEvent();\n  }\n\n  initializeDisplayName() {\n    return new Promise((resolve, reject) => {\n      const prefix = prefixSet[getRandomInt(prefixSet.length)];\n      const name = nameSet[getRandomInt(nameSet.length)];\n\n      console.log(prefix, name);\n\n      this.setState({ displayName: prefix + name }, () => {\n        console.log(this.state.displayName);\n        resolve(this.state.displayName);\n      });\n    });\n  }\n\n  listenChatEvent() {\n    socket.on(\"chat\", (data) => {\n      const chatlogs = this.state.chatlogs;\n      let filteredData = {};\n      Object.keys(data).forEach((key) => {\n        filteredData[key] = xss(data[key]);\n      });\n      chatlogs.push(filteredData);\n      this.setState({ chatlogs });\n    });\n  }\n\n  handleChatValueChange(e) {\n    const chatValue = e.target.value;\n    this.setState({ chatValue });\n  }\n\n  handleBoardcastChat() {\n    socket.emit(\"chat\", {\n      name: this.state.displayName,\n      value: this.state.chatValue,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"chat-background\">\n        <div className=\"chat-box\">\n          <div className=\"chat-logs\">\n            {/* <ChatBlock\n              name=\"겁먹은천해명\"\n              message=\"호들호들 김호들 화이팅! 호들호들 김호들 화이팅! 호들호들 김호들\n                화이팅! 호들호들 김호들 화이팅! 호들호들 김호들 화이팅! 호들호들\n                김호들 화이팅!\"\n            />\n            <ChatBlock name=\"단서찾은유병재\" message=\"역시 유느님!\" />\n            <ChatBlock name=\"놀란신동\" message=\"결국 신동이 다 푸는듯\" /> */}\n            {this.state.chatlogs.map((chat, index) => {\n              const isMine = chat.name === this.state.displayName;\n\n              return (\n                <ChatBlock\n                  key={index}\n                  isMine={isMine}\n                  name={chat.name}\n                  message={chat.value}\n                />\n              );\n            })}\n          </div>\n          <div className=\"chat-form\">\n            <input\n              className=\"chat-text\"\n              type=\"text\"\n              value={this.state.chatValue}\n              onChange={this.handleChatValueChange.bind(this)}\n            ></input>\n            <button\n              className=\"chat-btn--snd\"\n              onClick={this.handleBoardcastChat.bind(this)}\n            >\n              <i className=\"fas fa-keyboard\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n"],"sourceRoot":""}